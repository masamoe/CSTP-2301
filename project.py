import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Load your CSV file
# Replace 'your_data.csv' with the actual file name
data = pd.read_csv('MS_Bulk_Panamax_Kamsarmax_Monthly.csv')

# Extract features (X) and target variable (y)
# Replace with your feature column names
feature_columns = ['10603', '10616', '10655', '70815', '70983', '80244', '97113', '97191', '532913', '532957', '532969', '532973', '533017', '533021', '533025', '533029', '540614', '541624', '541628', '541632', '541636', '541640', '542001', '542005', '542043', '542055', '548658', '551089', '551093', '551097', '551101', '551137', '551141', '551145', '551149', '551177', '551181', '551185', '551189', '551217', '551221', '551225', '551229', '8852136', '10743923', '10743971', '11118', '30202', '30204', '30217', '30218', '30227', '30228', '30237', '30238', '30248', '30250', '30260', '30261', '33253', '33254', '33255', '37997', '41626', '43268', '44933', '45008', '45239', '45766', '45839', '46067', '47179', '47190', '50974', '55998', '56033', '61511', '62018', '66393', '67531', '70744', '70747', '77781', '97183', '97187', '97199', '528933', '528937', '531399', '532670', '532921', '532929', '532933', '532941', '532945', '532953', '532961', '534449', '540721', '540734', '540753', '541608', '541612', '541620', '542079', '545676', '545677', '545678', '545679', '546265', '546270', '546495', '546500', '22437', '29032', '43448', '43452', '43457', '97195', '532897', '532901', '532905', '532909', '532917', '532937', '532977', '533469', '542159', '542163', '542167', '542171', '542175', '542179', '542183', '533461', '533465', '533473', '533481', '533489', '533493', '533497', '533501', '533505', '533513', '533517', '533521', '533525', '541616', '533357', '533361', '533369', '533373', '533377', '533381', '533385', '533401', '533409', '533417', '533421', '533425', '533429', '533437', '533441', '533445', '533449', '533453', '533457', '533389', '533393', '533397', '533405', '534450', '547571', '530833', '533285', '533289', '18373', '19236', '19641', '19671', '19769', '22763', '22764', '22793', '22794', '22811', '22816', '22817', '30211', '30213', '30223', '30224', '30233', '30234', '30243', '30244', '30255', '30256', '30266', '30267', '33151', '33152', '33153', '529917', '529920', '529983', '530019', '530022', '530082', '530088', '531378', '540732', '540751', '546167', '546168', '546169', '546170', '546171', '546172', '546173', '546174', '546175', '546176', '546645', '547339', '547343', '547347', '547348', '547349', '547350', '547351', '548222', '8852052', '8852054', '8852108', '8852148', '8852484', '10509786', '10509789', '10509791', '10509978', '10509980', '10509987', '10510325', '10510329', '10510330', '10510447', '10510450', '10510453', '10510846', '10510848', '10510850', '10511369', '10511374', '10511376', '10511437', '10511438', '10511439', '10511460', '10511464', '10511468', '10511490', '10511497', '10511501', '20651', '22766', '22767', '22768', '22775', '22776', '22777', '22789', '22795', '22798', '22805', '22807', '22813', '22822', '22828', '40482', '45310', '45327', '45376', '46138', '46154', '46204', '52789', '60385', '62096', '77158', '77483', '81881', '86174', '97730', '99802', '529923', '529926', '529929', '529932', '529956', '529959', '529962', '530001', '530004', '530007', '530025', '530028', '530031', '530049',
                   '530058', '530067', '530070', '530091', '530094', '534435', '545628', '545629', '545630', '545631', '548494', '22769', '22771', '22772', '22778', '22780', '22785', '22786', '22787', '22791', '22799', '22800', '22801', '22806', '22808', '22809', '22810', '22812', '22814', '22818', '22820', '22821', '22823', '22826', '49013', '57579', '58612', '529938', '529941', '529944', '529947', '529950', '529965', '529968', '529977', '529986', '529989', '529992', '530010', '530034', '530037', '530052', '530055', '530061', '530064', '530073', '530076', '530079', '530085', '548038', '548042', '10806', '14970', '22774', '22782', '22788', '22792', '22802', '22803', '22815', '22819', '58618', '58642', '58653', '58659', '58674', '529953', '529980', '529995', '529998', '530016', '530040', '530043', '530097', '534039', '534436', '540884', '547712', '549109', '549114', '8930643', '8930644', '8930645', '8932838', '8934333', '8934334', '8934349', '8936391', '8936393', '8936394', '8945392', '8945394', '8945399', '10633008', '10721656', '10721660', '10721661', '10722346', '10722348', '10722356', '10722367', '10722372', '10722376', '11278915', '11278919', '11278920', '11279174', '11279175', '11279188', '11279191', '11279195', '11279196', '7555', '35869', '38498', '40285', '40966', '48709', '48809', '64609', '95469', '99988', '12445', '12446', '19597', '22544', '22548', '22552', '22555', '22559', '22562', '22566', '22569', '24766', '24769', '529905', '529908', '529911', '533970', '533973', '533976', '541452', '541453', '541454', '548166', '548170', '10152', '10158', '10756', '10923', '10952', '10970', '12386', '12435', '12437', '12467', '12877', '12878', '12886', '12890', '12903', '12975', '13011', '13012', '13055', '13074', '13109', '13137', '13140', '13174', '13218', '13220', '13250', '13256', '13327', '13351', '13368', '14205', '22532', '22536', '22539', '24771', '528798', '529651', '530393', '530406', '530413', '530510', '548162', '548434', '548442', '548450', '548458', '548835', '549830', '549831', '10139', '12929', '12945', '12966', '12984', '13085', '13094', '13107', '13158', '13951', '14333', '14392', '14801', '14948', '15246', '15333', '15439', '24767', '24768', '24770', '24773', '24316', '24353', '548254', '548338', '548538', '548542', '548546', '548550', '24327', '24341', '24372', '24400', '24447', '548418', '548422', '548426', '548430', '548438', '548446', '548454', '548462', '548554', '548558', '548562', '548566', '548570', '548574', '548578', '548582', '548614', '549811', '530262', '530270', '530290', '534733', '534737', '534741', '542009', '542013', '542452', '542456', '542460', '10066', '21986', '24820', '29819', '29821', '36820', '40405', '46186', '50330', '54776', '57163', '64176', '71326', '78636', '88944', '93219', '546235', '546240', '546245', '546250', '546255', '546260', '546275', '546280', '546465', '546470', '546475', '546480', '546485', '546490', '546505', '546510', '547433', '547437', '547441', '547445', '547449', '547453', '547457', '547461', '547465', '547684', '547688', '547692', '547795', '547799']
target_column = '11118'  # Replace with your target column name

X = data[feature_columns]
y = data[target_column]

# Handle missing values
# Replace with your preferred method (mean, median, etc.)
X = X.fillna(X.mean())
y = y.fillna(y.mean())

# Initialize variables for tracking accuracy
total_accuracy = 0
num_predictions = 0

# Create an Excel file for reporting
report_df = pd.DataFrame(columns=['Time', 'Actual', 'Prediction', 'Accuracy'])

# Initialize an empty list to store data
report_data = []

# Initialize variables for tracking accuracy
total_accuracy = 0

# Iterate over the data, training and testing the model
for i in range(len(data) - 36):
    # Training data includes all samples from the beginning up to n-36
    X_train = X.iloc[:i + 36, :]
    y_train = y.iloc[:i + 36]

    # Test data includes one sample ahead
    X_test = X.iloc[i + 36, :].values.reshape(1, -1)
    y_test = y.iloc[i + 36]

    # Initialize and train the regression model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Make predictions
    y_pred = model.predict(X_test)

    # Calculate accuracy
    accuracy = 100 * (1 - abs((y_test - y_pred) / y_test))

    # Update overall accuracy metrics
    total_accuracy += accuracy

    # Append results to the list
    report_data.append({
        # Replace 'time_column' with the actual time column name
        'Time': data.iloc[i + 36, 0],
        'Actual': y_test,
        'Prediction': y_pred[0],
        'Accuracy': accuracy
    })


# Convert the list to a DataFrame
report_df = pd.DataFrame(report_data)

# Calculate average accuracy
average_accuracy = total_accuracy / num_predictions

# Save the report to an Excel file
# Replace 'report.xlsx' with the desired file name
report_df.to_excel('report.xlsx', index=False)

# Print average accuracy
print(f'Average Accuracy: {average_accuracy:.2f}%')
